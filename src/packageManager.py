import json
from enum import Enum
from pathlib import Path
from typing import List

import requests
import beeManager
import config
from srctools.logger import get_logger

logger = get_logger()


class dltype(Enum):
	beepackage = 0
	bmpackage = 1
	bee24_app = 2
	bee24_items = 3


def installFromUrl(url: str, DLtype: dltype = dltype.beepackage):
	"""
	install software from url
	:param DLtype: the type of the download, defaults to BEE package
	:param url: direct download link to the package/application zip
	:return:
	"""
	path = Path(config.load('beePath'))
	if not path.exists():
		logger.error(f"BEE install path doesn't exist!")
		path.mkdir()
		logger.info('the folder has been created, please install BEE')
		return
	#tempFolder = config.temp
	if DLtype == dltype.beepackage:
		pass
	elif DLtype == dltype.bmpackage:
		pass
	else:
		logger.error(f'unknown dl type "{DLtype}"!')


class PackageDatabase:

	database: List[dict] = []
	apiUrl: str
	databasePath = Path( config.load('databasePath') )

	def __init__(self):
		logger.info(f'checking package database.. ({self.databasePath})')
		if not self.databasePath.exists():
			with self.databasePath.open('x' as file:
				json.dump(self.database, file, indent=4)





# TODO: replace with a more general implementation of "install"
def install(update: bool = False):
	packagesPath: str = beeManager.packageFolder()
	service: str = self.package.service()  # package host service
	filebytes: bytes  # the file content in bytes
	fileurl: str  # the file download url
	filename: str  # the file name
	filepath: str  # file path in the disk
	logger.info(f'installing package {self.package.ID}')
	logger.debug('getting file url and name')
	if service == 'github':
		data = requests.get(self.package.url).json()  # get the release data
		fileurl = data['assets'][0]['browser_download_url']  # take the file url
		filename = data['assets'][0]['name']  # take the file name
	elif service == 'gdrive':
		fileurl = self.package.url  # take the file url
		filename = self.package.filename  # take the file name
	else:
		logger.warning(f'unexpected service found, expected "gdrive" or "github" got "{service}", aborting')
		return  # unsupported service
	logger.debug(f'file name: {filename}, file url: {fileurl}')
	# the filepath is generated by combining the packages folder path + filename
	filepath = packagesPath.join(filename)
	logger.debug('downloading file...')
	try:
		# get the file
		filebytes = requests.get(fileurl).content
	except Exception as e:
		logger.error(f'FAILED TO DOWNLOAD FILE! error: {e}')
		return
	logger.debug('success!')
	logger.debug('writing file to disk..')
	mode = 'x+b' if update is False else 'wb'
	try:
		# write file to disk
		with open(filepath, mode) as file:
			file.write(filebytes)
	except Exception as e:
		logger.error(f'FAILED TO SAVE FILE! error: {e}')
		return
	logger.info('successufully installed package!')
	# done